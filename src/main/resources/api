openapi: 3.0.3
info:
  version: "1.0.0"
  title: "User manager API"
tags:
  - name: user
    description: Operations about user

paths:
  /user/login:
    post:
      tags:
        - user login
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatedRequest'
      responses:
        '201':
          description: successful operation user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatedResponse'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    get:
      tags:
        - list users
      summary: List the users
      description: ''
      operationId: listUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
    put:
      tags:
        - user update
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /user/{userId}:
    delete:
      tags:
        - user delete
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    get:
      tags:
        - get user
      summary: Get user by id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApi'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "joohn@doe.org"
        password:
          type: string
          example: "hunter2"
    LoginResponse:
      type: "object"
      required:
        - "user"
      properties:
        user:
          $ref: '#/components/schemas/UserApi'
        access_token:
          type: "string"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        profile:
          $ref: '#/components/schemas/ProfileApi'
        lastLogin:
          type: string
          example: "1458250440000"
    UserCreatedRequest:
      type: object
      properties:
        name:
          type: string
          example: Joe Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        profile:
          type: integer
          example: 1
    UserCreatedResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Joe Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        profile:
          type: integer
          example: 1
        created:
          type: string
          example: "1458250440000"
        modified:
          type: string
          example: "1458250440000"
    UserUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Joe Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        birthday:
          type: string
          example: "1458250440000"
        phone:
          type: string
          example: '12345'
        profile:
          type: integer
          example: 1
    ProfileApi:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "ADMIN"
        description:
          type: string
          example: "Puede crear, listar, leer, actualizar y eliminar"
    UserApi:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        birthday:
          type: string
          example: "1458250440000"
        phone:
          type: string
          example: '12345'
    ApiErrorResponse:
      type: "object"
      required:
        - "message"
      properties:
        message:
          type: "string"
    UserList:
      type: "object"
      properties:
        users:
          type: "array"
          items:
              $ref: '#/components/schemas/UserApi'
